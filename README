REQUIRED in each folder:
	antlr-3.5.2-complete.jar

HOWTO:
	make generate
	make
	make run
	make show
	make (very)clean

CTF_parser_w_dot:
	Parser from Trace Compass.
	Used to interpret and save in a tree the metadata TSDL files.
	Can generate dot file with tree

Simple_parser_wo_dot:
	Simple parser from http://stackoverflow.com/questions/1931307/antlr-is-there-a-simple-example
	Due to the fact it "returns" in the grammar, it looks like we cannot create Tree and return as dot file

Simple_parser_w_dot:
	Simple parser from http://stackoverflow.com/questions/2856612/visualizing-an-ast-created-with-antlr-in-a-net-environment
	Due to the fact it does not "returns" in the grammar, we can create Tree and return as dot file

----------------------------------------------------------------------
-- NEW TECHNIQUE (Tested with ModeTags abd XML_parser)
----------------------------------------------------------------------

- get antlr4.6 jar:
  wget http://www.antlr.org/download/antlr-4.6-complete.jar

- generate grammar
  java -cp antlr-4.6-complete.jar org.antlr.v4.Tool *.g4

- setup environment (Note: the . should point to the folder containing all .class)
  export CLASSPATH=".:<full_path_to>/antlr-4.6-complete.jar"
  alias grun='java org.antlr.v4.gui.TestRig'

- compile all generated code:
  javac -cp .:antlr-4.6-complete.jar ModeTags*.java
  javac -cp .:antlr-4.6-complete.jar XML*.java

- visualize (Note: "file" is the name of the method used to parse)
  grun ModeTags file -token test.xml -gui
  grun XML document -token web.xml -gui

